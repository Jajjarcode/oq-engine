# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4

import os
import unittest
import uuid
import numpy

from openquake import kvs
from openquake import test
from openquake import shapes
from openquake.parser import vulnerability

TEST_FILE = 'VulnerabilityModelFile-test.xml'

NO_OF_CURVES_IN_TEST_FILE = 10

class VulnerabilityModelTestCase(unittest.TestCase):
    
    def setUp(self):
        # get random ID as job_id
        self.job_id = str(uuid.uuid4())

        # load vulnerability and write to memcache
        vulnerability.load_vulnerability_model(self.job_id,
            os.path.join(test.DATA_DIR, TEST_FILE))

        self.vulnerability_curves = \
            vulnerability.load_vuln_curves_from_kvs(self.job_id)
    
    def tearDown(self):
        # flush vulnerability curves in kvs
        vulnerability.delete_vuln_curves(self.job_id)

    def test_loads_all_the_functions_defined(self):
        # the vulnerability curve loader adds the empty curve, i.e.,
        # dict has to hold one more curve than defined in test file
        self.assertEqual(NO_OF_CURVES_IN_TEST_FILE + 1, 
                         len(self.vulnerability_curves))
    
    def test_loads_the_function_data(self):
        """
        <VulnerabilityFunction ID="CN" ...>
            <IntensityMeasureValues>5.00 5.50 6.00 6.50 7.00 7.50 8.00 8.50 9.00 9.50 10.00</IntensityMeasureValues>
            <LossRatioValues>0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.03 0.08 0.08 0.08</LossRatioValues>
            <CoefficientVariationValues>0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30</CoefficientVariationValues>
        </VulnerabilityFunction>
        """
        
        expected_curve = shapes.Curve([(5.0, (0.0, 0.3)), (5.5, (0.0, 0.3)), (6.0, (0.0, 0.3)),
                (6.5, (0.0, 0.3)), (7.0, (0.0, 0.3)), (7.5, (0.0, 0.3)), (8.0, (0.01, 0.3)),
                (8.5, (0.03, 0.3)), (9.0, (0.08, 0.3)), (9.5, (0.08, 0.3)), (10.0, (0.08, 0.3))])
        
        self.assertEqual(expected_curve, self.vulnerability_curves["CN"])

        """
    	<VulnerabilityFunction ID="AF" ...>
            <IntensityMeasureValues>5.00 5.50 6.00 6.50 7.00 7.50 8.00 8.50 9.00 9.50 10.00</IntensityMeasureValues>
            <LossRatioValues>0.00 0.00 0.00 0.00 0.00 0.01 0.02 0.05 0.09 0.09 0.09</LossRatioValues>
            <CoefficientVariationValues> 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30</CoefficientVariationValues>
        </VulnerabilityFunction>
        """
        
        expected_curve = shapes.Curve([(5.0, (0.0, 0.3)), (5.5, (0.0, 0.3)), (6.0, (0.0, 0.3)),
                (6.5, (0.0, 0.3)), (7.0, (0.0, 0.3)), (7.5, (0.01, 0.3)), (8.0, (0.02, 0.3)),
                (8.5, (0.05, 0.3)), (9.0, (0.09, 0.3)), (9.5, (0.09, 0.3)), (10.0, (0.09, 0.3))])
        
        self.assertEqual(expected_curve, self.vulnerability_curves["AF"])
