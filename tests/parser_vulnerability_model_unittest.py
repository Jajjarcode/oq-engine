# -*- coding: utf-8 -*-
# vim: tabstop=4 shiftwidth=4 softtabstop=4

import os
import unittest

from opengem import test
from opengem import state
from opengem.parser import vulnerability

STATE = state.STATE
TEST_FILE = 'VulnerabilityModelFile-test.xml'

class VulnerabilityModelTestCase(unittest.TestCase):
    
    def setUp(self):
        STATE['vulnerability_curves'] = {}

        vulnerability.load_vulnerability_model(
                os.path.join(test.DATA_DIR, TEST_FILE))
    
    def test_loads_all_the_functions_defined(self):
        self.assertEqual(10, len(STATE['vulnerability_curves']))

    """
    <VulnerabilityFunction ID="CN" IntensityMeasureType="MMI" ProbabilisticDistribution="LN">
        <IntensityMeasureValues> 5.00 5.50 6.00 6.50 7.00 7.50 8.00 8.50 9.00 9.50 10.00</IntensityMeasureValues>
        <LossRatioValues> 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.03 0.08 0.08 0.08</LossRatioValues>
        <CoefficientVariationValues> 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30</CoefficientVariationValues>
    </VulnerabilityFunction>
    """
    def test_loads_all_the_function_data_1(self):
        curve = STATE['vulnerability_curves']['CN']
        self.assertEqual(11, len(curve.domain))
        
        self.assertEqual((0.0, 0.30), curve.get_for('5.0'))
        self.assertEqual((0.0, 0.30), curve.get_for('5.5'))
        self.assertEqual((0.0, 0.30), curve.get_for('6.0'))
        self.assertEqual((0.0, 0.30), curve.get_for('6.5'))
        self.assertEqual((0.0, 0.30), curve.get_for('7.0'))
        self.assertEqual((0.0, 0.30), curve.get_for('7.5'))
        self.assertEqual((0.01, 0.30), curve.get_for('8.0'))
        self.assertEqual((0.03, 0.30), curve.get_for('8.5'))
        self.assertEqual((0.08, 0.30), curve.get_for('9.0'))
        self.assertEqual((0.08, 0.30), curve.get_for('9.5'))
        self.assertEqual((0.08, 0.30), curve.get_for('10.0'))

    """
	<VulnerabilityFunction ID="AF" IntensityMeasureType="MMI" ProbabilisticDistribution="LN">
        <IntensityMeasureValues> 5.00 5.50 6.00 6.50 7.00 7.50 8.00 8.50 9.00 9.50 10.00</IntensityMeasureValues>
        <LossRatioValues> 0.00 0.00 0.00 0.00 0.00 0.01 0.02 0.05 0.09 0.09 0.09</LossRatioValues>
        <CoefficientVariationValues> 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30</CoefficientVariationValues>
    </VulnerabilityFunction>
    """
    def test_loads_all_the_function_data_2(self):
        curve = STATE['vulnerability_curves']['AF']
        self.assertEqual(11, len(curve.domain))

        self.assertEqual((0.0, 0.30), curve.get_for('5.0'))
        self.assertEqual((0.0, 0.30), curve.get_for('5.5'))
        self.assertEqual((0.0, 0.30), curve.get_for('6.0'))
        self.assertEqual((0.0, 0.30), curve.get_for('6.5'))
        self.assertEqual((0.0, 0.30), curve.get_for('7.0'))
        self.assertEqual((0.01, 0.30), curve.get_for('7.5'))
        self.assertEqual((0.02, 0.30), curve.get_for('8.0'))
        self.assertEqual((0.05, 0.30), curve.get_for('8.5'))
        self.assertEqual((0.09, 0.30), curve.get_for('9.0'))
        self.assertEqual((0.09, 0.30), curve.get_for('9.5'))
        self.assertEqual((0.09, 0.30), curve.get_for('10.0'))
